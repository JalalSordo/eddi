/*
 * EDDI
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * PackageExtension
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-05-13T23:55:01.697Z")
public class PackageExtension {
  @SerializedName("type")
  private String type = null;

  @SerializedName("extensions")
  private Map<String, Object> extensions = null;

  @SerializedName("config")
  private Map<String, Object> config = null;

  public PackageExtension type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public PackageExtension extensions(Map<String, Object> extensions) {
    this.extensions = extensions;
    return this;
  }

  public PackageExtension putExtensionsItem(String key, Object extensionsItem) {
    if (this.extensions == null) {
      this.extensions = new HashMap<String, Object>();
    }
    this.extensions.put(key, extensionsItem);
    return this;
  }

   /**
   * Get extensions
   * @return extensions
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getExtensions() {
    return extensions;
  }

  public void setExtensions(Map<String, Object> extensions) {
    this.extensions = extensions;
  }

  public PackageExtension config(Map<String, Object> config) {
    this.config = config;
    return this;
  }

  public PackageExtension putConfigItem(String key, Object configItem) {
    if (this.config == null) {
      this.config = new HashMap<String, Object>();
    }
    this.config.put(key, configItem);
    return this;
  }

   /**
   * Get config
   * @return config
  **/
  @ApiModelProperty(value = "")
  public Map<String, Object> getConfig() {
    return config;
  }

  public void setConfig(Map<String, Object> config) {
    this.config = config;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackageExtension packageExtension = (PackageExtension) o;
    return Objects.equals(this.type, packageExtension.type) &&
        Objects.equals(this.extensions, packageExtension.extensions) &&
        Objects.equals(this.config, packageExtension.config);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, extensions, config);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackageExtension {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

